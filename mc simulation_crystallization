
# MONTE CARLO SIMULATION OF CRYSTALLIZATION YIELD

# Load necessary libraries
library(dplyr)
library(ggplot2)

# Initialize parameters
n_simulations <- 10000  # Number of simulations

# Generate random values for each input parameter
solute_concentration <- runif(n_simulations, 0.5, 1.5)  # between 0.5 M and 1.5 M
temperature <- runif(n_simulations, 20, 30)  # between 20°C and 30°C
pressure <- runif(n_simulations, 1, 3)  # between 1 atm and 3 atm


# Generate histograms for input variables

hist(solute_concentration, breaks = 50, 
     main = "Solute concentration: values distribution", 
     xlab = "solution molarity (M)", 
     col = "lightblue", border = "black",
     xlim = c(0.4, 1.6), 
     ylim = c(0, 350))

# Add limit lines for the 0.5 and 1.5 values
abline(v = 0.5, col = "red", lwd = 2, lty = 2)  # Lower limit line
abline(v = 1.5, col = "blue", lwd = 2, lty = 2)  # Upper limit line

# Manually add labels on the x-axis
axis(1, at = seq(0.5, 1.5, by = 0.1))

# Add a legend
legend("topright",  # Place the legend at the top right
       legend = c("Lower Limit", "Upper Limit"),
       col = c("red", "blue"),
       lwd = 2, lty = 2)



hist(temperature, breaks = 50, 
     main = "Temperature: values distribution", 
     xlab = "temperature (°C)", 
     col = "red", border = "black",
     xlim = c(18, 32), 
     ylim = c(0, 350))

# Add limit lines for the 20 and 30 values
abline(v = 20, col = "red", lwd = 2, lty = 2)  # Lower limit line
abline(v = 30, col = "blue", lwd = 2, lty = 2)  # Upper limit line

# Manually add labels on the x-axis
axis(1, at = seq(20, 30, by = 2))

# Add a legend
legend("topright",  # Place the legend at the top right
       legend = c("Lower Limit", "Upper Limit"),
       col = c("red", "blue"),
       lwd = 2, lty = 2)


hist(pressure, breaks = 50, 
     main = "Pressure: values distribution", 
     xlab = "pressure (atm)", 
     col = "orange", border = "black",
     xlim = c(0.5, 3.5), 
     ylim = c(0, 350))

# Add limit lines for the 1 and 3 values
abline(v = 1, col = "red", lwd = 2, lty = 2)  # Lower limit line
abline(v = 3, col = "blue", lwd = 2, lty = 2)  # Upper limit line

# Manually add labels on the x-axis
axis(1, at = seq(1, 3, by = 0.5))

# Add a legend
legend("topright",  # Place the legend at the top right
       legend = c("Lower Limit", "Upper Limit"),
       col = c("red", "blue"),
       lwd = 2, lty = 2)



# Calculate the crystal yield based on the empirical equation
crystal_yield <- 2 * solute_concentration + 1.5 * temperature + 0.8 * pressure

# Combine data into a data frame
simulation_data <- data.frame(solute_concentration, temperature, pressure, crystal_yield)

# Summary statistics
summary_stats <- simulation_data %>%
  summarise(
    mean_crystal_yield = mean(crystal_yield),
    sd_crystal_yield = sd(crystal_yield),
    min_crystal_yield = min(crystal_yield),
    max_crystal_yield = max(crystal_yield)
  )

# Print summary statistics
print(summary_stats)


# Monte Carlo simulation histogram for Crystal Yield
ggplot(simulation_data, aes(x = crystal_yield)) +
  geom_histogram(binwidth = 0.1, fill = "green", color = "black") +
  xlab("Crystal Yield (kg)") +
  ylab("Frequency") +
  ggtitle("Monte Carlo simulation of Crystal Yield distribution") +
  ylim(0, 100) +
  scale_x_continuous(breaks = seq(30, 55, by = 5), limits = c(30,55)) +
  theme(legend.position = "topright") +
  guides(col = guide_legend(title = NULL, override.aes = list(linetype = c(2, 2), size = 2)))


mean_crystal_yield <- mean(simulation_data$crystal_yield); mean_crystal_yield
sd_crystal_yield <- sd(simulation_data$crystal_yield); sd_crystal_yield
  
# Generate simulated crystal yield data based on summary statistics
set.seed(42)
crystal_yield <- rnorm(10000, mean_crystal_yield, sd_crystal_yield)

# Calculate mean and standard deviation of simulated crystal yield data 
# generated on summary statistics
mean_yield <- mean(crystal_yield)
std_yield <- sd(crystal_yield)

# Calculate 95% confidence interval
confidence_level <- 0.95
z_value <- 1.96  # Z-value for a 95% confidence level
margin_of_error <- z_value * (std_yield / sqrt(length(crystal_yield)))

confidence_interval_lower <- mean_yield - margin_of_error
confidence_interval_upper <- mean_yield + margin_of_error

# Calculate the probability of yield being below 40g
probability_below_40 <- sum(crystal_yield < 40) / length(crystal_yield)

# Print results
cat("Mean Yield:", round(mean_yield,3),"\n")
cat("Standard Deviation:", round(std_yield,3),"\n")
cat("95% Confidence Interval:", round(confidence_interval_lower,3), "to", round(confidence_interval_upper,3), "\n")
cat("Probability of Yield Below 40g:", probability_below_40 * 100, "%\n")

